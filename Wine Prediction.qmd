---
title: "Wine Predictor"
format: html
editor: visual
execute:
  warning: false
  message: false
---

```{r}
# Install required packages if not already installed
options(repos = c(CRAN = "https://cran.rstudio.com"))
if (!require(tidyverse)) install.packages("tidyverse")
if (!require(janitor)) install.packages("janitor")
if (!require(GGally)) install.packages("GGally")
if (!require(skimr)) install.packages("skimr")
if (!require(DataExplorer)) install.packages("DataExplorer")
if (!require(caret)) install.packages("caret")
if (!require(ROSE)) install.packages("ROSE")
if (!require(recipes)) install.packages("recipes")
if (!require(nnet)) install.packages("nnet")
if (!require(DMwR2)) install.packages("DMwR2")
if (!require(e1071)) install.packages("e1071")
if (!require(randomForest)) install.packages("randomForest")
if (!require(rpart.plot)) install.packages("rpart.plot")
if (!require(yardstick)) install.packages("yardstick")
if (!require(rsample)) install.packages("rsample")
if (!require(caretEnsemble)) install.packages("caretEnsemble")
if (!require(corrplot)) install.packages("corrplot")
if (!require(factoextra)) install.packages("factoextra")
if (!require(keras)) install.packages("keras")
if (!require(tensorflow)) install.packages("tensorfLow")
if (!require(glmnet)) install.packages("glmnet")
if (!require(reshape2)) install.packages("reshape2")

# load libraries
library(tidyverse)
library(janitor)
library(GGally)
library(skimr)
library(DataExplorer)
library(caret)
library(recipes)
library(ROSE)
#library(DMwR2)
library(e1071)
library(randomForest)
library(rpart)
library(rpart.plot)
library(nnet)
library(keras)
library(tensorflow)
library(glmnet)
library(pROC)
library(yardstick)
library(cvms)
library(rsample)
library(caretEnsemble)
library(corrplot)
library(factoextra)
library(reshape2)
```

# Clean and Modify Wine Data

## Red Wine

```{r}

# Load and clean red wine data
red_wine_cleaned <- read_delim("winequality-red.csv", delim = ";") %>%
  clean_names() %>%
  filter(if_all(everything(), ~ !is.na(.))) %>%
  mutate(
    # Convert 'quality' from numerical variable to categorical variable
    quality_category = case_when(
      quality <= 5 ~ "Low",
      quality == 6 ~ "Medium",
      quality >= 7 ~ "High"
    ),
      quality_category = factor(quality_category, levels = c("Low", "Medium", "High")),
    # Add 'type' column to id Wine
    type = "red"
  ) %>%
  filter(!is.na(quality_category))

# View the result
head(red_wine_cleaned)
table(red_wine_cleaned$quality_category)

```

## White Wine

```{r}

# Load and clean white wine data
white_wine_cleaned <- read_delim("winequality-white.csv", delim = ";") %>%
  clean_names() %>%
  filter(if_all(everything(), ~ !is.na(.))) %>%
  mutate(
    # Convert 'quality' from numerical variable to categorical variable
    quality_category = case_when(
      quality <= 5 ~ "Low",
      quality == 6 ~ "Medium",
      quality >= 7 ~ "High"
    ),
      quality_category = factor(quality_category, levels = c("Low", "Medium", "High")),
    # Add 'type' column to id Wine
    type = "white"
  ) %>%
  filter(!is.na(quality_category))

# View the result
head(white_wine_cleaned)
table(white_wine_cleaned$quality_category)

```

## Red Wine and White Wine Combined

```{r}

# Combining both datasets
combined_wine <- bind_rows(red_wine_cleaned, white_wine_cleaned)

# Check the result
head(combined_wine)
table(combined_wine$type)
table(combined_wine$quality_category, combined_wine$type)

```

# Explatoratory Data Analysis

## Red Wine

```{r}

#Explatoratory Data Analysis
#Red Wine

# Summarize
summary(red_wine_cleaned)
str(red_wine_cleaned)
skimr::skim(red_wine_cleaned)

```

```{r}

# Check class balance of target variable
table(red_wine_cleaned$quality_category)

# Bar chart
ggplot(red_wine_cleaned, aes(x = quality_category)) +
  geom_bar(fill = "skyblue") +
  labs(
    title = "Distribution of Wine Quality Categories (Red Wine)",
    x = "Quality Category",
    y = "Count"
  )

```

```{r}

# Correlation plot
numeric_data <- red_wine_cleaned %>% select(where(is.numeric))
cor_matrix <- cor(numeric_data, use = "complete.obs")

corrplot(cor_matrix,
         method = "color",
         type = "upper",
         tl.col = "black",
         tl.cex = 0.8,
         addCoef.col = "black",
         number.cex = 0.7,
         diag = FALSE)

```

```{r}
wine_vars <- c(
  "fixed_acidity", "volatile_acidity", "citric_acid", "residual_sugar",
  "chlorides", "free_sulfur_dioxide", "total_sulfur_dioxide",
  "density", "p_h", "sulphates", "alcohol"
)

for (var in wine_vars) {

  if (var %in% names(red_wine_cleaned) && is.numeric(red_wine_cleaned[[var]])) {
    # Histogram
    hist(red_wine_cleaned[[var]],
         main = paste("Histogram of", var),
         xlab = var,
         col = "lightblue")
    # Box plot
    boxplot(red_wine_cleaned[[var]],
            main = paste("Boxplot of", var),
            ylab = var,
            col = "tomato")
  }
}

```

```{r}

wine_vars <- c(
  "fixed_acidity", "volatile_acidity", "citric_acid", "residual_sugar",
  "chlorides", "free_sulfur_dioxide", "total_sulfur_dioxide",
  "density", "p_h", "sulphates", "alcohol"
)

for (var in wine_vars) {
  if (var %in% names(red_wine_cleaned) && is.numeric(red_wine_cleaned[[var]])) {
    # Skewness
    skw <- skewness(red_wine_cleaned[[var]], na.rm = TRUE)
    print(paste("Skewness of", var, "=", round(skw, 3)))
  }
}

```

```{r}

# Boxplot: Alcohol by Quality and Type
ggplot(red_wine_cleaned, aes(x = quality_category, y = alcohol, fill = type)) +
  geom_boxplot(position = position_dodge(width = 0.8)) +
  labs(
    title = "Alcohol Content by Wine Quality and Type",
    x = "Quality Category",
    y = "Alcohol (%)",
    fill = "Wine Type"
  ) +
  theme_minimal()

# Boxplot: Volatile Acidity by Quality and Type
ggplot(red_wine_cleaned, aes(x = quality_category, y = volatile_acidity, fill = type)) +
  geom_boxplot(position = position_dodge(width = 0.8)) +
  labs(
    title = "Volatile Acidity by Wine Quality and Type",
    x = "Quality Category",
    y = "Volatile Acidity",
    fill = "Wine Type"
  ) +
  theme_minimal()

# Boxplot: Sulphates by Quality and Type
ggplot(red_wine_cleaned, aes(x = quality_category, y = sulphates, fill = type)) +
  geom_boxplot(position = position_dodge(width = 0.8)) +
  labs(
    title = "Sulphates by Wine Quality and Type",
    x = "Quality Category",
    y = "Sulphates",
    fill = "Wine Type"
  ) +
  theme_minimal()

# Summary of Box Plots

red_wine_cleaned %>%
  group_by(type, quality_category) %>%
  summarise(
    mean_alcohol = mean(alcohol, na.rm = TRUE),
    median_alcohol = median(alcohol, na.rm = TRUE),
    q1_alcohol = quantile(alcohol, 0.25, na.rm = TRUE),
    q3_alcohol = quantile(alcohol, 0.75, na.rm = TRUE),
    mean_volatile_acidity = mean(volatile_acidity, na.rm = TRUE),
    median_volatile_acidity = median(volatile_acidity, na.rm = TRUE),
    q1_volatile_acidity = quantile(volatile_acidity, 0.25, na.rm = TRUE),
    q3_volatile_acidity = quantile(volatile_acidity, 0.75, na.rm = TRUE),
    mean_sulphates = mean(sulphates, na.rm = TRUE),
    median_sulphates = median(sulphates, na.rm = TRUE),
    q1_sulphates = quantile(sulphates, 0.25, na.rm = TRUE),
    q3_sulphates = quantile(sulphates, 0.75, na.rm = TRUE)
  ) %>%
  arrange(type, quality_category)

```

::: note
Grouped box plots of the top predictors (alcohol, volatile acidity, sulphates) by quality and type, generated based on their importance in the Random Forest variable importance plot. Ggplot was used as it can be used for multiple variable simultaneously.
:::

```{r}

# Filtering top variables
top_vars_red <- red_wine_cleaned %>%
  select(alcohol, volatile_acidity, sulphates, quality_category, type)

# Pairwise scatter plot matrix
ggpairs(
  top_vars_red,
  columns = 1:3,   
  mapping = aes(color = quality_category, shape = type),
  upper = list(continuous = "points"),
  lower = list(continuous = "smooth"),
  diag = list(continuous = "densityDiag")
)

```

::: note
A pairwise scatter plot matrix of the top predictors based off the variable importance plot was generated to illustrate how these variables interact and if these combinations help distinguish wine quality or type.
:::

```{r}
# Density plot: Alcohol
ggplot(red_wine_cleaned, aes(x = alcohol, fill = quality_category)) +
  geom_density(alpha = 0.6) +
  facet_wrap(~type) +
  labs(
    title = "Alcohol Distribution by Wine Quality and Type",
    x = "Alcohol (%)",
    y = "Density",
    fill = "Quality"
  ) +
  theme_minimal()

# Density plot: Volatile Acidity
ggplot(red_wine_cleaned, aes(x = volatile_acidity, fill = quality_category)) +
  geom_density(alpha = 0.6) +
  facet_wrap(~type) +
  labs(
    title = "Volatile Acidity Distribution by Wine Quality and Type",
    x = "Volatile Acidity",
    y = "Density",
    fill = "Quality"
  ) +
  theme_minimal()

# Density plot: Sulphates
ggplot(red_wine_cleaned, aes(x = sulphates, fill = quality_category)) +
  geom_density(alpha = 0.6) +
  facet_wrap(~type) +
  labs(
    title = "Sulphates Distribution by Wine Quality and Type",
    x = "Sulphates",
    y = "Density",
    fill = "Quality"
  ) +
  theme_minimal()

# Density plot: pH
ggplot(red_wine_cleaned, aes(x = p_h, fill = quality_category)) +
  geom_density(alpha = 0.6) +
  facet_wrap(~type) +
  labs(
    title = "pH Distribution by Wine Quality and Type",
    x = "pH",
    y = "Density",
    fill = "Quality"
  ) +
  theme_minimal()
```

::: note
Density plots of the top predictors by quality and type were generated to visualize how the distribution shapes differ across quality levels and to show whether the groups are separated or overlapping. This helps convey how much these variables contribute to distinguishing wine quality and is essentially an illustration of what is summarized in the variable importance plot.
:::

```{r}

# Heat Map
num_vars <- red_wine_cleaned %>%
  select(where(is.numeric)) %>%
  select(-quality)  

cor_mat <- cor(num_vars, use = "pairwise.complete.obs")
melted_cor <- melt(cor_mat)

ggplot(melted_cor, aes(Var1, Var2, fill = value)) +
  geom_tile(color = "white") +
  scale_fill_gradient2(
    low = "#b2182b", mid = "white", high = "#2166ac", midpoint = 0, 
    limit = c(-1, 1), space = "Lab"
  ) +
  labs(
    title = "Correlation Heatmap of Numeric Features",
    x = "",
    y = "",
    fill = "Correlation"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```

::: note
A correlation heat map created to show the relationship between variable.
:::

## White Wine

```{r}

# Summarize
summary(white_wine_cleaned)
str(white_wine_cleaned)
skimr::skim(white_wine_cleaned)

```

```{r}

# Check class balance of target variable
table(white_wine_cleaned$quality_category)

# Bar chart
ggplot(white_wine_cleaned, aes(x = quality_category)) +
  geom_bar(fill = "skyblue") +
  labs(
    title = "Distribution of Wine Quality Categories (White Wine)",
    x = "Quality Category",
    y = "Count"
  )

```

```{r}

# Correlation plot
numeric_data <- white_wine_cleaned %>% select(where(is.numeric))
cor_matrix <- cor(numeric_data, use = "complete.obs")

corrplot(cor_matrix,
         method = "color",
         type = "upper",
         tl.col = "black",
         tl.cex = 0.8,
         addCoef.col = "black",
         number.cex = 0.7,
         diag = FALSE)

```

```{r}
wine_vars <- c(
  "fixed_acidity", "volatile_acidity", "citric_acid", "residual_sugar",
  "chlorides", "free_sulfur_dioxide", "total_sulfur_dioxide",
  "density", "p_h", "sulphates", "alcohol"
)

for (var in wine_vars) {
  if (var %in% names(white_wine_cleaned) && is.numeric(white_wine_cleaned[[var]])) {
    # Histogram
    hist(white_wine_cleaned[[var]],
         main = paste("Histogram of", var),
         xlab = var,
         col = "lightblue")
    # Box plot
    boxplot(white_wine_cleaned[[var]],
            main = paste("Boxplot of", var),
            ylab = var,
            col = "tomato")
  }
}

```

```{r}

wine_vars <- c(
  "fixed_acidity", "volatile_acidity", "citric_acid", "residual_sugar",
  "chlorides", "free_sulfur_dioxide", "total_sulfur_dioxide",
  "density", "p_h", "sulphates", "alcohol"
)

for (var in wine_vars) {
  if (var %in% names(white_wine_cleaned) && is.numeric(white_wine_cleaned[[var]])) {
    # Skewness
    skw <- skewness(white_wine_cleaned[[var]], na.rm = TRUE)
    print(paste("Skewness of", var, "=", round(skw, 3)))
  }
}

```

```{r}

# Boxplot: Alcohol by Quality and Type
ggplot(white_wine_cleaned, aes(x = quality_category, y = alcohol, fill = type)) +
  geom_boxplot(position = position_dodge(width = 0.8)) +
  labs(
    title = "Alcohol Content by Wine Quality and Type",
    x = "Quality Category",
    y = "Alcohol (%)",
    fill = "Wine Type"
  ) +
  theme_minimal()

# Boxplot: Volatile Acidity by Quality and Type
ggplot(white_wine_cleaned, aes(x = quality_category, y = volatile_acidity, fill = type)) +
  geom_boxplot(position = position_dodge(width = 0.8)) +
  labs(
    title = "Volatile Acidity by Wine Quality and Type",
    x = "Quality Category",
    y = "Volatile Acidity",
    fill = "Wine Type"
  ) +
  theme_minimal()

# Boxplot: Sulphates by Quality and Type
ggplot(white_wine_cleaned, aes(x = quality_category, y = sulphates, fill = type)) +
  geom_boxplot(position = position_dodge(width = 0.8)) +
  labs(
    title = "Sulphates by Wine Quality and Type",
    x = "Quality Category",
    y = "Sulphates",
    fill = "Wine Type"
  ) +
  theme_minimal()

# Summary of Box Plots

white_wine_cleaned %>%
  group_by(type, quality_category) %>%
  summarise(
    mean_alcohol = mean(alcohol, na.rm = TRUE),
    median_alcohol = median(alcohol, na.rm = TRUE),
    q1_alcohol = quantile(alcohol, 0.25, na.rm = TRUE),
    q3_alcohol = quantile(alcohol, 0.75, na.rm = TRUE),
    mean_volatile_acidity = mean(volatile_acidity, na.rm = TRUE),
    median_volatile_acidity = median(volatile_acidity, na.rm = TRUE),
    q1_volatile_acidity = quantile(volatile_acidity, 0.25, na.rm = TRUE),
    q3_volatile_acidity = quantile(volatile_acidity, 0.75, na.rm = TRUE),
    mean_sulphates = mean(sulphates, na.rm = TRUE),
    median_sulphates = median(sulphates, na.rm = TRUE),
    q1_sulphates = quantile(sulphates, 0.25, na.rm = TRUE),
    q3_sulphates = quantile(sulphates, 0.75, na.rm = TRUE)
  ) %>%
  arrange(type, quality_category)

```

::: note
Grouped box plots of the top predictors (alcohol, volatile acidity, sulphates) by quality and type, generated based on their importance in the Random Forest variable importance plot. Ggplot was used as it can be used for multiple variable simultaneously.
:::

```{r}

# filtering top variables
top_vars_white <- white_wine_cleaned %>%
  select(alcohol, volatile_acidity, sulphates, quality_category, type)

# Pairwise scatter plot matrix
ggpairs(
  top_vars_white,
  columns = 1:3,   
  mapping = aes(color = quality_category, shape = type),
  upper = list(continuous = "points"),
  lower = list(continuous = "smooth"),
  diag = list(continuous = "densityDiag")
)

```

::: note
A pairwise scatter plot matrix of the top predictors based off the variable importance plot was generated to illustrate how these variables interact and if these combinations help distinguish wine quality or type.
:::

```{r}
# Density plot: Alcohol
ggplot(white_wine_cleaned, aes(x = alcohol, fill = quality_category)) +
  geom_density(alpha = 0.6) +
  facet_wrap(~type) +
  labs(
    title = "Alcohol Distribution by Wine Quality and Type",
    x = "Alcohol (%)",
    y = "Density",
    fill = "Quality"
  ) +
  theme_minimal()

# Density plot: Volatile Acidity
ggplot(white_wine_cleaned, aes(x = volatile_acidity, fill = quality_category)) +
  geom_density(alpha = 0.6) +
  facet_wrap(~type) +
  labs(
    title = "Volatile Acidity Distribution by Wine Quality and Type",
    x = "Volatile Acidity",
    y = "Density",
    fill = "Quality"
  ) +
  theme_minimal()

# Density plot: Sulphates
ggplot(white_wine_cleaned, aes(x = sulphates, fill = quality_category)) +
  geom_density(alpha = 0.6) +
  facet_wrap(~type) +
  labs(
    title = "Sulphates Distribution by Wine Quality and Type",
    x = "Sulphates",
    y = "Density",
    fill = "Quality"
  ) +
  theme_minimal()

# Density plot: pH
ggplot(white_wine_cleaned, aes(x = p_h, fill = quality_category)) +
  geom_density(alpha = 0.6) +
  facet_wrap(~type) +
  labs(
    title = "pH Distribution by Wine Quality and Type",
    x = "pH",
    y = "Density",
    fill = "Quality"
  ) +
  theme_minimal()
```

::: note
Density plots of the top predictors by quality and type were generated to visualize how the distribution shapes differ across quality levels and to show whether the groups are separated or overlapping. This helps convey how much these variables contribute to distinguishing wine quality and is essentially an illustration of what is summarized in the variable importance plot.
:::

```{r}

# Heat Map
num_vars <- white_wine_cleaned %>%
  select(where(is.numeric)) %>%
  select(-quality)  

cor_mat <- cor(num_vars, use = "pairwise.complete.obs")
melted_cor <- melt(cor_mat)

ggplot(melted_cor, aes(Var1, Var2, fill = value)) +
  geom_tile(color = "white") +
  scale_fill_gradient2(
    low = "#b2182b", mid = "white", high = "#2166ac", midpoint = 0, 
    limit = c(-1, 1), space = "Lab"
  ) +
  labs(
    title = "Correlation Heatmap of Numeric Features",
    x = "",
    y = "",
    fill = "Correlation"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```

::: note
A correlation heat map created to show the relationship between variable.
:::

## Red and White Wine Combined

```{r}

# Summarize
summary(combined_wine)
str(combined_wine)
skimr::skim(combined_wine)

```

```{r}


table(combined_wine$quality_category)

# Bar chart 
ggplot(combined_wine, aes(x = quality_category, fill = type)) +
  geom_bar(position = "dodge") +
  labs(
    title = "Distribution of Wine Quality Categories by Wine Type",
    x = "Quality Category",
    y = "Count",
    fill = "Wine Type"
  )

```

```{r}

# Correlation plot
numeric_data <- combined_wine %>% select(where(is.numeric))
cor_matrix <- cor(numeric_data, use = "complete.obs")

corrplot(cor_matrix,
         method = "color",
         type = "upper",
         tl.col = "black",
         tl.cex = 0.8,
         addCoef.col = "black",
         number.cex = 0.7,
         diag = FALSE)

```

```{r}

wine_vars <- c(
  "fixed_acidity", "volatile_acidity", "citric_acid", "residual_sugar",
  "chlorides", "free_sulfur_dioxide", "total_sulfur_dioxide",
  "density", "p_h", "sulphates", "alcohol"
)

for (var in wine_vars) {
  if (var %in% names(combined_wine) && is.numeric(combined_wine[[var]])) {
    # Histogram
    hist(combined_wine[[var]],
         main = paste("Histogram of", var, "(Combined)"),
         xlab = var,
         col = "lightblue")
    # Box plot
    boxplot(combined_wine[[var]] ~ combined_wine$type,
            main = paste("Boxplot of", var, "by Type"),
            xlab = "Type",
            ylab = var,
            col = c("tomato", "gold"))
  }
}

```

```{r}

wine_vars <- c(
  "fixed_acidity", "volatile_acidity", "citric_acid", "residual_sugar",
  "chlorides", "free_sulfur_dioxide", "total_sulfur_dioxide",
  "density", "p_h", "sulphates", "alcohol"
)

for (var in wine_vars) {
  if (var %in% names(combined_wine) && is.numeric(combined_wine[[var]])) {
    # Skewness
    skw <- skewness(combined_wine[[var]], na.rm = TRUE)
    print(paste("Skewness of", var, "=", round(skw, 3)))
  }
}

```

```{r}

# Boxplot: Alcohol by Quality and Type
ggplot(combined_wine, aes(x = quality_category, y = alcohol, fill = type)) +
  geom_boxplot(position = position_dodge(width = 0.8)) +
  labs(
    title = "Alcohol Content by Wine Quality and Type",
    x = "Quality Category",
    y = "Alcohol (%)",
    fill = "Wine Type"
  ) +
  theme_minimal()

# Boxplot: Volatile Acidity by Quality and Type
ggplot(combined_wine, aes(x = quality_category, y = volatile_acidity, fill = type)) +
  geom_boxplot(position = position_dodge(width = 0.8)) +
  labs(
    title = "Volatile Acidity by Wine Quality and Type",
    x = "Quality Category",
    y = "Volatile Acidity",
    fill = "Wine Type"
  ) +
  theme_minimal()

# Boxplot: Sulphates by Quality and Type
ggplot(combined_wine, aes(x = quality_category, y = sulphates, fill = type)) +
  geom_boxplot(position = position_dodge(width = 0.8)) +
  labs(
    title = "Sulphates by Wine Quality and Type",
    x = "Quality Category",
    y = "Sulphates",
    fill = "Wine Type"
  ) +
  theme_minimal()

# Summary of Box Plots

combined_wine %>%
  group_by(type, quality_category) %>%
  summarise(
    mean_alcohol = mean(alcohol, na.rm = TRUE),
    median_alcohol = median(alcohol, na.rm = TRUE),
    q1_alcohol = quantile(alcohol, 0.25, na.rm = TRUE),
    q3_alcohol = quantile(alcohol, 0.75, na.rm = TRUE),
    mean_volatile_acidity = mean(volatile_acidity, na.rm = TRUE),
    median_volatile_acidity = median(volatile_acidity, na.rm = TRUE),
    q1_volatile_acidity = quantile(volatile_acidity, 0.25, na.rm = TRUE),
    q3_volatile_acidity = quantile(volatile_acidity, 0.75, na.rm = TRUE),
    mean_sulphates = mean(sulphates, na.rm = TRUE),
    median_sulphates = median(sulphates, na.rm = TRUE),
    q1_sulphates = quantile(sulphates, 0.25, na.rm = TRUE),
    q3_sulphates = quantile(sulphates, 0.75, na.rm = TRUE)
  ) %>%
  arrange(type, quality_category)

```

::: note
Grouped box plots of the top predictors (alcohol, volatile acidity, sulphates) by quality and type, generated based on their importance in the Random Forest variable importance plot. Ggplot was used as it can be used for multiple variable simultaneously.
:::

```{r}

# filtering top variables
top_vars_combined <- combined_wine %>%
  select(alcohol, volatile_acidity, sulphates, quality_category, type)

# Pairwise scatter plot matrix
ggpairs(
  top_vars_combined,
  columns = 1:3,   
  mapping = aes(color = quality_category, shape = type),
  upper = list(continuous = "points"),
  lower = list(continuous = "smooth"),
  diag = list(continuous = "densityDiag")
)

```

::: note
A pairwise scatter plot matrix of the top predictors based off the variable importance plot was generated to illustrate how these variables interact and if these combinations help distinguish wine quality or type.
:::

```{r}
# Density plot: Alcohol
ggplot(combined_wine, aes(x = alcohol, fill = quality_category)) +
  geom_density(alpha = 0.6) +
  facet_wrap(~type) +
  labs(
    title = "Alcohol Distribution by Wine Quality and Type",
    x = "Alcohol (%)",
    y = "Density",
    fill = "Quality"
  ) +
  theme_minimal()

# Density plot: Volatile Acidity
ggplot(combined_wine, aes(x = volatile_acidity, fill = quality_category)) +
  geom_density(alpha = 0.6) +
  facet_wrap(~type) +
  labs(
    title = "Volatile Acidity Distribution by Wine Quality and Type",
    x = "Volatile Acidity",
    y = "Density",
    fill = "Quality"
  ) +
  theme_minimal()

# Density plot: Sulphates
ggplot(combined_wine, aes(x = sulphates, fill = quality_category)) +
  geom_density(alpha = 0.6) +
  facet_wrap(~type) +
  labs(
    title = "Sulphates Distribution by Wine Quality and Type",
    x = "Sulphates",
    y = "Density",
    fill = "Quality"
  ) +
  theme_minimal()

# Density plot: pH
ggplot(combined_wine, aes(x = p_h, fill = quality_category)) +
  geom_density(alpha = 0.6) +
  facet_wrap(~type) +
  labs(
    title = "pH Distribution by Wine Quality and Type",
    x = "pH",
    y = "Density",
    fill = "Quality"
  ) +
  theme_minimal()
```

::: note
Density plots of the top predictors by quality and type were generated to visualize how the distribution shapes differ across quality levels and to show whether the groups are separated or overlapping. This helps convey how much these variables contribute to distinguishing wine quality and is essentially an illustration of what is summarized in the variable importance plot.
:::

```{r}

# Heat Map
num_vars <- combined_wine %>%
  select(where(is.numeric)) %>%
  select(-quality)  

cor_mat <- cor(num_vars, use = "pairwise.complete.obs")
melted_cor <- melt(cor_mat)

ggplot(melted_cor, aes(Var1, Var2, fill = value)) +
  geom_tile(color = "white") +
  scale_fill_gradient2(
    low = "#b2182b", mid = "white", high = "#2166ac", midpoint = 0, 
    limit = c(-1, 1), space = "Lab"
  ) +
  labs(
    title = "Correlation Heatmap of Numeric Features",
    x = "",
    y = "",
    fill = "Correlation"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```

::: note
A correlation heat map created to show the relationship between variable.
:::

# Model Data

## Red Wine

### Random Forest Model

```{r}

# Split data and train
set.seed(100)  
train_indices_red <- createDataPartition(red_wine_cleaned$quality_category, p = 0.7, list = FALSE)
train_data_red <- red_wine_cleaned[train_indices_red, ]
test_data_red <- red_wine_cleaned[-train_indices_red, ]

train_rf_ml_red <- train_data_red %>% select(-quality)
test_rf_ml_red <- test_data_red %>% select(-quality)

rf_model_ml_red <- randomForest(quality_category ~ ., data = train_rf_ml_red, ntree = 200, mtry = 3, importance = TRUE)

# Variable importance plot
varImpPlot(rf_model_ml_red)

# Predict and evaluate model
rf_preds_ml_red <- predict(rf_model_ml_red, test_rf_ml_red)
rf_probs_ml_red <- predict(rf_model_ml_red, test_rf_ml_red, type = "prob")

# Confusion Matrix
confusionMatrix(rf_preds_ml_red, test_rf_ml_red$quality_category)

# ROC/AUC for each class 
for (class in colnames(rf_probs_ml_red)) {
  roc_i <- roc(test_rf_ml_red$quality_category == class, rf_probs_ml_red[, class])
  plot(roc_i, col = "black", main = paste("ROC Curve - Random Forest ", class, "vs All (Red Wine)"))
  cat("AUC for", class, "quality:", round(auc(roc_i), 3), "\n")
}

# Averaged AUC (overall performance)
roc_obj_rf <- multiclass.roc(test_rf_ml_red$quality_category, rf_probs_ml_red)
cat("Averaged multiclass AUC:", round(auc(roc_obj_rf), 3), "\n")

# Overlay ROC curves
colors <- c("red", "blue", "green")
classes <- colnames(rf_probs_ml_red)

roc_first <- roc(test_rf_ml_red$quality_category == classes[1], rf_probs_ml_red[, classes[1]])
plot(roc_first, col = colors[1], main = "All Random Forest ROC Curves (Red Wine)", lwd = 2)

for (i in 2:length(classes)) {
  roc_i <- roc(test_rf_ml_red$quality_category == classes[i], rf_probs_ml_red[, classes[i]])
  lines(roc_i, col = colors[i], lwd = 2)
}

legend("bottomright", legend = classes, col = colors, lwd = 2)


```

### Decision Tree Model

```{r}

# Removing 'quality' from training and test data
train_tree_dt_red <- train_data_red %>% select(-quality)
test_tree_dt_red <- test_data_red %>% select(-quality)

# Train New Model
tree_m_dt_red <- rpart(quality_category ~ ., data = train_tree_dt_red, method = "class")
rpart.plot(tree_m_dt_red, extra = 106)

# Predict and Evaluate
tree_preds_dt_red <- predict(tree_m_dt_red, test_tree_dt_red, type = "class")
tree_probs_dt_red <- predict(tree_m_dt_red, test_tree_dt_red, type = "prob")

# Confusion Matrix
confusionMatrix(tree_preds_dt_red, test_tree_dt_red$quality_category)

# ROC/AUC for each class 
for (class in colnames(tree_probs_dt_red)) {
  roc_i <- roc(test_tree_dt_red$quality_category == class, tree_probs_dt_red[, class])
  plot(roc_i, col = "black", main = paste("ROC Curve - Decision Tree (", class, " vs All)", sep = ""))
  cat("AUC for", class, "quality:", round(auc(roc_i), 3), "\n")
}

# Averaged AUC (overall performance)
roc_obj_tree <- multiclass.roc(test_tree_dt_red$quality_category, tree_probs_dt_red)
cat("Averaged multiclass AUC:", round(auc(roc_obj_tree), 3), "\n")

# Overlay ROC curves
colors <- c("red", "blue", "green")
classes <- colnames(tree_probs_dt_red)

roc_first <- roc(test_tree_dt_red$quality_category == classes[1], tree_probs_dt_red[, classes[1]])
plot(roc_first, col = colors[1], main = "All Decision Tree ROC Curves (Red Wine)", lwd = 2)

for (i in 2:length(classes)) {
  roc_i <- roc(test_tree_dt_red$quality_category == classes[i], tree_probs_dt_red[, classes[i]])
  lines(roc_i, col = colors[i], lwd = 2)
}

legend("bottomright", legend = classes, col = colors, lwd = 2)


```

## White Wine

### Random Forest Model

```{r}

# Split data and train
set.seed(100)  
train_indices_white <- createDataPartition(white_wine_cleaned$quality_category, p = 0.7, list = FALSE)
train_data_white <- white_wine_cleaned[train_indices_white, ]
test_data_white <- white_wine_cleaned[-train_indices_white, ]

train_rf_white <- train_data_white %>% select(-quality)
test_rf_white <- test_data_white %>% select(-quality)

rf_model_rf_white <- randomForest(quality_category ~ ., data = train_rf_white, ntree = 200, mtry = 3, importance = TRUE)

# Variable importance plot
varImpPlot(rf_model_rf_white)

# Predict and evaluate model
rf_preds <- predict(rf_model_rf_white, test_rf_white)
rf_probs <- predict(rf_model_rf_white, test_rf_white, type = "prob")

# Confusion Matrix
confusionMatrix(rf_preds, test_rf_white$quality_category)

# ROC/AUC for each class 
for (class in colnames(rf_probs)) {
  roc_i <- roc(test_rf_white$quality_category == class, rf_probs[, class])
  plot(roc_i, col = "black", main = paste("ROC Curve –", class, "vs All (White Wine)"))
  cat("AUC for", class, "quality:", round(auc(roc_i), 3), "\n")
}

# Averaged AUC (overall performance)
roc_obj_rf <- multiclass.roc(test_rf_white$quality_category, rf_probs)
cat("Averaged multiclass AUC:", round(auc(roc_obj_rf), 3), "\n")

# Overlay ROC curves
colors <- c("red", "blue", "green")
classes <- colnames(rf_probs)

roc_first <- roc(test_rf_white$quality_category == classes[1], rf_probs[, classes[1]])
plot(roc_first, col = colors[1], main = "All ROC Curves (White Wine)", lwd = 2)

for (i in 2:length(classes)) {
  roc_i <- roc(test_rf_white$quality_category == classes[i], rf_probs[, classes[i]])
  lines(roc_i, col = colors[i], lwd = 2)
}

legend("bottomright", legend = classes, col = colors, lwd = 2)


```

### Decision Tree Model

```{r}

# Removing 'quality' from training and test data
train_tree_dt_white <- train_data_white %>% select(-quality)
test_tree_dt_white <- test_data_white %>% select(-quality)

# Train New Model
tree_m_dt_white <- rpart(quality_category ~ ., data = train_tree_dt_white, method = "class")
rpart.plot(tree_m_dt_white, extra = 106)

# Predict and Evaluate
tree_preds_dt_white <- predict(tree_m_dt_white, test_tree_dt_white, type = "class")
tree_probs_dt_white <- predict(tree_m_dt_white, test_tree_dt_white, type = "prob")

# Confusion Matrix
confusionMatrix(tree_preds_dt_white, test_tree_dt_white$quality_category)

# ROC/AUC for each class
for (class in colnames(tree_probs_dt_white)) {
  roc_i <- roc(test_tree_dt_white$quality_category == class, tree_probs_dt_white[, class])
  plot(roc_i, col = "black", main = paste("ROC Curve - Decision Tree (", class, " vs All)", sep = ""))
  cat("AUC for", class, "quality:", round(auc(roc_i), 3), "\n")
}

# Averaged AUC (overall performance)
roc_obj_tree <- multiclass.roc(test_tree_dt_white$quality_category, tree_probs_dt_white)
cat("Averaged multiclass AUC:", round(auc(roc_obj_tree), 3), "\n")

# Overlay ROC curves
colors <- c("red", "blue", "green")
classes <- colnames(tree_probs_dt_white)

roc_first <- roc(test_tree_dt_white$quality_category == classes[1], tree_probs_dt_white[, classes[1]])
plot(roc_first, col = colors[1], main = "All Decision Tree ROC Curves (White Wine)", lwd = 2)

for (i in 2:length(classes)) {
  roc_i <- roc(test_tree_dt_white$quality_category == classes[i], tree_probs_dt_white[, classes[i]])
  lines(roc_i, col = colors[i], lwd = 2)
}

legend("bottomright", legend = classes, col = colors, lwd = 2)


```

## Red/White Wine Combined

### Random Forest Model

```{r}
# Split data and train
set.seed(100)  
train_indices_combined <- createDataPartition(combined_wine$quality_category, p = 0.7, list = FALSE)
train_data_combined <- combined_wine[train_indices_combined, ]
test_data_combined <- combined_wine[-train_indices_combined, ]

train_rf_combined <- train_data_combined %>% select(-quality)
test_rf_combined <- test_data_combined %>% select(-quality)

rf_model_combined <- randomForest(quality_category ~ ., data = train_rf_combined, ntree = 200, mtry = 3, importance = TRUE)

# Variable importance plot
varImpPlot(rf_model_combined)

# Predict and evaluate model
rf_preds_combined <- predict(rf_model_combined, test_rf_combined)
rf_probs_combined <- predict(rf_model_combined, test_rf_combined, type = "prob")

# Confusion Matrix
confusionMatrix(rf_preds_combined, test_rf_combined$quality_category)

# ROC/AUC for each class 
for (class in colnames(rf_probs_combined)) {
  roc_i <- roc(test_rf_combined$quality_category == class, rf_probs_combined[, class])
  plot(roc_i, col = "black", main = paste("ROC Curve –", class, "vs All (Combined Wine)"))
  cat("AUC for", class, "quality:", round(auc(roc_i), 3), "\n")
}

# Averaged AUC (overall performance)
roc_obj_rf <- multiclass.roc(test_rf_combined$quality_category, rf_probs_combined)
cat("Averaged multiclass AUC:", round(auc(roc_obj_rf), 3), "\n")

# Overlay ROC curves
colors <- c("red", "blue", "green")
classes <- colnames(rf_probs_combined)

roc_first <- roc(test_rf_combined$quality_category == classes[1], rf_probs_combined[, classes[1]])
plot(roc_first, col = colors[1], main = "All ROC Curves (Combined Wine)", lwd = 2)

for (i in 2:length(classes)) {
  roc_i <- roc(test_rf_combined$quality_category == classes[i], rf_probs_combined[, classes[i]])
  lines(roc_i, col = colors[i], lwd = 2)
}

legend("bottomright", legend = classes, col = colors, lwd = 2)

```

### Decision Tree Model

```{r}

# Remove 'quality' From Training and Test Data
train_tree_dt_combined <- train_data_combined %>% select(-quality)
test_tree_dt_combined <- test_data_combined %>% select(-quality)

# Train New Model
tree_m_dt_combined <- rpart(quality_category ~ ., data = train_tree_dt_combined, method = "class")
rpart.plot(tree_m_dt_combined, extra = 106)

# Predict and Evaluate
tree_preds_dt_combined <- predict(tree_m_dt_combined, test_tree_dt_combined, type = "class")
tree_probs_dt_combined <- predict(tree_m_dt_combined, test_tree_dt_combined, type = "prob")

# Confusion Matrix
confusionMatrix(tree_preds_dt_combined, test_tree_dt_combined$quality_category)

# ROC Curve and AUC for each class
for (class in colnames(tree_probs_dt_combined)) {
  roc_i <- roc(test_tree_dt_combined$quality_category == class, tree_probs_dt_combined[, class])
  plot(roc_i, col = "black", main = paste("ROC Curve - Decision Tree (", class, " vs All)", sep = ""))
  cat("AUC for", class, "quality:", round(auc(roc_i), 3), "\n")
}

# Averaged AUC (overall performance)
roc_obj_tree <- multiclass.roc(test_tree_dt_combined$quality_category, tree_probs_dt_combined)
cat("Averaged multiclass AUC:", round(auc(roc_obj_tree), 3), "\n")

# Overlay ROC curves
colors <- c("red", "blue", "green")
classes <- colnames(tree_probs_dt_combined)

roc_first <- roc(test_tree_dt_combined$quality_category == classes[1], tree_probs_dt_combined[, classes[1]])
plot(roc_first, col = colors[1], main = "All Decision Tree ROC Curves (Red/White Combined Wine)", lwd = 2)

for (i in 2:length(classes)) {
  roc_i <- roc(test_tree_dt_combined$quality_category == classes[i], tree_probs_dt_combined[, classes[i]])
  lines(roc_i, col = colors[i], lwd = 2)
}

legend("bottomright", legend = classes, col = colors, lwd = 2)

```

### Logistic Regression

```{r}

# Ensuring consistent factors for quality_category
all_levels <- levels(factor(combined_wine$quality_category))
combined_wine$quality_category <- factor(combined_wine$quality_category, levels = all_levels)

# Split data
train_data_log <- train_data_combined
test_data_log  <- test_data_combined

# Train logistic regression 
logistic_model <- multinom(quality_category ~ ., data = train_data_log %>% select(-quality))

# Predict class probabilities and classes
logistic_probs <- predict(logistic_model, test_data_log %>% select(-quality, -quality_category), type = "prob")
logistic_preds <- predict(logistic_model, test_data_log %>% select(-quality, -quality_category), type = "class")

# Summary
summary(logistic_model)

# Confusion Matrix
confusionMatrix(logistic_preds, test_data_log$quality_category)

# ROC Curve and AUC for each class 
for (class in colnames(logistic_probs)) {
  roc_i <- roc(test_data_log$quality_category == class, logistic_probs[, class])
  plot(roc_i, col = "black", main = paste("ROC Curve - Logistic Regression (", class, " vs All)", sep = ""))
  cat("AUC for", class, "quality:", round(auc(roc_i), 3), "\n")
}

# Averaged AUC (overall performance)
roc_obj_log <- multiclass.roc(test_data_log$quality_category, logistic_probs)
cat("Averaged multiclass AUC:", round(auc(roc_obj_log), 3), "\n")

# Overlay ROC curves
colors <- c("red", "blue", "green")
classes <- colnames(logistic_probs)

roc_first <- roc(test_data_log$quality_category == classes[1], logistic_probs[, classes[1]])
plot(roc_first, col = colors[1], main = "All ROC Curves (Combined Wine - Logistic Regression)", lwd = 2)

for (i in 2:length(classes)) {
  roc_i <- roc(test_data_log$quality_category == classes[i], logistic_probs[, classes[i]])
  lines(roc_i, col = colors[i], lwd = 2)
}

legend("bottomright", legend = classes, col = colors, lwd = 2)

```
